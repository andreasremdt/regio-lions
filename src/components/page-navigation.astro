---
import { Image } from "astro:assets";
import logo from "@/images/logo.png";
import Icon from "@/components/icon.astro";
import { formatLink } from "@/lib/utils";
import { getMenuLinks } from "@/lib/storyblok";

const links = await getMenuLinks("header");
---

<header
  class="relative mx-auto flex max-w-7xl items-center justify-between px-4 py-4 before:absolute before:-top-1/2 before:bottom-32 before:right-0 before:-z-10 before:aspect-square before:w-48 before:rounded-full before:bg-purple-100 before:blur-3xl md:px-8 md:py-8"
>
  <a
    href="/"
    class="rounded-md focus-visible:bg-primary-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
  >
    <Image
      src={logo}
      alt="logo der region lions"
      width="250"
      height="194"
      loading="eager"
      class="w-24 md:w-32"
    />
  </a>

  <button
    type="button"
    aria-label="öffne das hauptmenü"
    aria-live="polite"
    aria-controls="menu"
    aria-expanded="false"
    data-action="toggle-menu"
    class="z-20 rounded-sm text-gray-900 transition-colors hover:text-primary-900 focus-visible:text-primary-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-900 md:hidden"
  >
    <Icon name="menu" class="z-20 h-10 w-10" />
  </button>

  <nav
    class="pointer-events-none fixed inset-0 z-10 flex h-screen w-full flex-col justify-center gap-8 bg-white p-12 text-xl opacity-0 transition-opacity md:pointer-events-auto md:static md:h-auto md:w-auto md:flex-row md:bg-transparent md:p-0 md:text-base md:opacity-100"
    data-action="menu"
    id="menu"
  >
    {
      links.map((link) => (
        <a
          class="inline-flex items-center gap-x-2 rounded-sm font-medium text-gray-900 transition-colors hover:text-primary-900 focus-visible:text-primary-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-900"
          tabindex="0"
          target={link.link.target}
          rel={link.link.rel}
          href={formatLink(link.link)}
        >
          {link.name}
          {link.link.linktype === "url" && (
            <Icon name="link" class="h-5 w-5 -translate-y-px text-gray-400" />
          )}
        </a>
      ))
    }
  </nav>
</header>

<script>
  let toggle = document.querySelector(
    '[data-action="toggle-menu"]',
  ) as HTMLButtonElement;
  let menu = document.querySelector('[data-action="menu"]') as HTMLDivElement;
  let [open, close] = toggle.querySelectorAll(
    "path",
  ) as NodeListOf<SVGPathElement>;
  let links = menu.querySelectorAll("a") as NodeListOf<HTMLAnchorElement>;
  let mediaQuery = window.matchMedia("(max-width: 768px)");
  let firstLink = links[0];
  let lastLink = links[links.length - 1];
  let menuVisible = false;

  function handleMenuToggle() {
    menuVisible = !menuVisible;

    menu.setAttribute("aria-hidden", String(!menuVisible));
    toggle.setAttribute("aria-expanded", String(menuVisible));
    toggle.setAttribute(
      "aria-label",
      `${menuVisible ? "schließe" : "öffne"} das hauptmenü`,
    );
    links.forEach((link) => (link.tabIndex = menuVisible ? 0 : -1));

    if (menuVisible) {
      menu.classList.remove("opacity-0", "pointer-events-none");

      open.classList.add("hidden");
      close.classList.remove("hidden");
      document.body.classList.add("overflow-y-hidden");
      firstLink.focus();
    } else {
      menu.classList.add("opacity-0", "pointer-events-none");
      open.classList.remove("hidden");
      close.classList.add("hidden");
      document.body.classList.remove("overflow-y-hidden");
      toggle.focus();
    }
  }

  function handleFocusTrap(event: KeyboardEvent) {
    if (event.shiftKey) {
      if (document.activeElement === toggle) {
        event.preventDefault();
        lastLink.focus();
      }
    } else if (document.activeElement === lastLink) {
      event.preventDefault();
      toggle.focus();
    }
  }

  function handleKeyDown(event: KeyboardEvent) {
    if (menuVisible) {
      if (event.key === "Escape") {
        handleMenuToggle();
      }

      if (event.key === "Tab") {
        handleFocusTrap(event);
      }
    }
  }

  function handleMediaChange(event: MediaQueryListEvent | MediaQueryList) {
    if (event.matches) {
      toggle.setAttribute("aria-expanded", String(menuVisible));
      links.forEach((link) => (link.tabIndex = menuVisible ? 0 : -1));
    } else {
      links.forEach((link) => (link.tabIndex = 0));
    }
  }

  toggle.addEventListener("click", handleMenuToggle);
  document.addEventListener("keydown", handleKeyDown);
  mediaQuery.addEventListener("change", handleMediaChange);

  handleMediaChange(mediaQuery);
</script>
