---
import Alert from "@/components/alert.astro";
import Hero from "@/components/hero.astro";
import Layout from "@/layouts/default.astro";
---

<Layout
  title="Kontakt"
  description="Nehmen Sie Kontakt mit uns auf und schreiben Sie uns eine E-Mail."
>
  <Hero title="Kontakt aufnehmen">
    Wenn Sie mit uns Kontakt aufnehmen möchten können Sie dies über das
    Kontaktformular tun. Sollten Sie eine direkte E-Mail bevorzugen, können Sie
    uns unter <a href="mailto:info@regio-lions.com" class="link"
      >info@regio-lions.com</a
    > schreiben. Wir werden uns schnellst möglich bei Ihnen melden.
  </Hero>

  <div class="flex flex-col gap-x-12 lg:flex-row">
    <form method="POST" class="shrink-0 lg:w-2/3" data-form>
      <div class="mb-4 flex flex-col gap-4 sm:flex-row md:mb-8 md:gap-8">
        <div class="sm:w-1/2">
          <label for="firstname" class="label">Vorname</label>
          <input
            type="text"
            id="firstname"
            name="firstname"
            required
            autocomplete="given-name"
            data-error="Bitte geben Sie Ihren Vornamen an."
            class="textbox"
          />
        </div>

        <div class="sm:w-1/2">
          <label for="lastname" class="label">Nachname</label>
          <input
            type="text"
            id="lastname"
            name="lastname"
            required
            autocomplete="family-name"
            data-error="Bitte geben Sie Ihren Nachnamen an."
            class="textbox"
          />
        </div>
      </div>

      <div class="mb-4 flex flex-col gap-4 sm:flex-row md:mb-8 md:gap-8">
        <div class="sm:w-1/2">
          <label for="email" class="label">E-Mail</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            data-error="Bitte geben Sie eine gültige E-Mail-Adresse an."
            autocomplete="email"
            class="textbox"
          />
        </div>
        <div class="sm:w-1/2">
          <label for="phone" class="label flex items-center"
            >Telefonnummer <span
              class="ml-auto text-xs font-normal uppercase text-gray-500"
              >optional</span
            ></label
          >
          <input
            type="text"
            id="phone"
            name="phone"
            autocomplete="tel"
            class="textbox"
          />
        </div>
      </div>

      <div class="mb-4 md:mb-8">
        <label for="message" class="label">Ihre Nachricht</label>
        <textarea
          name="message"
          id="message"
          required
          minlength="10"
          data-error="Bitte schreiben Sie mindestens 10 Zeichen."
          class="textbox min-h-32 resize-y px-4 py-2 align-middle"></textarea>
      </div>

      <button type="submit" class="btn btn-primary">Nachricht senden</button>
    </form>

    <Alert
      title="Vielen Dank für Ihre Nachricht!"
      type="success"
      description="Ihre Nachricht wurde erfolgreich an uns gesendet. Wir werden uns demnächst bei Ihnen melden."
    />
    <Alert
      title="Das hat leider nicht geklappt..."
      type="error"
      description="Leider konnte Ihre Nachricht nicht gesendet werden. Bitte versuchen Sie es später erneut."
    />
  </div>
</Layout>

<script>
  let form = document.querySelector("[data-form]") as HTMLFormElement;
  let inputs = form.querySelectorAll(
    "input, textarea",
  ) as NodeListOf<HTMLInputElement>;
  let button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  let alerts = document.querySelectorAll(
    "[data-alert]",
  ) as NodeListOf<HTMLTemplateElement>;

  form.setAttribute("novalidate", "novalidate");
  form.setAttribute("aria-assertive", "polite");

  function validate(input: HTMLInputElement) {
    if (!input.checkValidity() && !input.hasAttribute("aria-invalid")) {
      let error = document.createElement("p");

      error.setAttribute("id", `${input.name}-error`);
      error.setAttribute("aria-live", "assertive");
      error.classList.add("text-red-500", "text-sm", "mt-1");
      error.textContent = input.getAttribute("data-error");

      input.setAttribute("aria-invalid", "true");
      input.setAttribute("aria-describedby", `${input.name}-error`);
      input.insertAdjacentElement("afterend", error);
    } else if (input.checkValidity() && input.hasAttribute("aria-invalid")) {
      input.nextElementSibling?.remove();
      input.removeAttribute("aria-invalid");
      input.removeAttribute("aria-describedby");
    }
  }

  async function send() {
    button.setAttribute("disabled", "");
    button.textContent = "Bitte warten...";

    let [success, error] = alerts;
    let response = await fetch("/api/send-email", {
      method: "POST",
      body: new FormData(form),
    });

    if (response.ok) {
      form.insertAdjacentHTML("afterend", success.innerHTML);
      button.textContent = "Nachricht gesendet";
    } else {
      document.querySelector<HTMLDivElement>('[role="alert"]')?.remove();

      form.insertAdjacentHTML("afterend", error.innerHTML);
      button.removeAttribute("disabled");
      button.textContent = "Nachricht senden";
    }
  }

  function handleSubmit(event: SubmitEvent) {
    event.preventDefault();

    inputs.forEach(validate);

    let firstInvalid = form.querySelector<HTMLInputElement>(
      '[aria-invalid="true"]',
    );

    if (firstInvalid) {
      firstInvalid.focus();
    } else {
      send();
    }
  }

  function handleBlur(event: FocusEvent) {
    let input = event.target as HTMLInputElement;

    if (input.hasAttribute("data-touched")) {
      validate(input);
    }
  }

  function handleInput(event: Event) {
    let input = event.target as HTMLInputElement;

    input.setAttribute("data-touched", "true");

    if (input.getAttribute("aria-invalid") === "true") {
      validate(input);
    }
  }

  form.addEventListener("submit", handleSubmit);

  for (let input of inputs) {
    input.addEventListener("blur", handleBlur);
    input.addEventListener("input", handleInput);
  }
</script>
